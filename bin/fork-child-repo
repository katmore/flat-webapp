#!/usr/bin/env bash
################################################################################
## fork-child-repo
##    git wrapper to clone and mirror into a "child" repo
##       in essence, creates an "invisible fork" of the parent repo.
##       This facilitates a "private fork" of a "public repo".
##    Inspired by stackoverflow thread: 
##       http://stackoverflow.com/questions/2129923/bash-run-command-before-a-script-exits
################################################################################
## Copyright (c) 2012-2016 Doug Bird. All Rights Reserved.
##    This file part of the 'boilerplate flat web application'; see
##    https://github.com/katmore/flat-webapp
## License:
##    "The flat framework" and "boilerplate flat web application"
##    is copyrighted free software.
##    You can redistribute it and/or modify it under either the terms and 
##    conditions of the "The MIT License (MIT)"; or the terms and conditions 
##    of the "GPL v3 License".
################################################################################
## Configuration varibles:
##    CHILD_REPO_URL:
##       The remote URL of the "child" repo; the repo to become the 
##       "private fork". Tis repo that will have the parent pushed/mirrored 
##       into. 
##       This script assumes the child repo already been created (ideally as
##       an empty repo).
##    PARENT_REPO_URL:
##       The remote URL of the "parent" repo; the repo that is 
##       "invisibly forked".
################################################################################
CHILD_REPO_URL=$1
PARENT_REPO_URL="https://github.com/katmore/flat-webapp.git"
################################################################################
## no configuration variables beyond this point
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
set -e
me=`basename "$0"`
echo "$me"
echo "(c) 2012-2016 Doug Bird. All Rights Reserved."
echo "This script is part of the 'boilerplate flat web application'"
echo "See: https://github.com/katmore/flat-webapp"
function usage {
   echo "usage:"
   echo "$me {CHILD_REPO_URL}"
   echo "\tCHILD_REPO_URL: the git URL to create a mirror ("invisible fork") of"
}
if [ -z "$CHILD_REPO_URL" ]; then
   echo "invalid (empty) value for CHILD_REPO_URL" 1>&2
   usage
   exit 1
fi
tmp_repo_dir=`mktemp -d`
function cleanup {
   if [ -d $tmp_repo_dir ];
      echo "(notice) removing tmp dir '$tmp_repo_dir'"
      rm -rf $tmp_repo_dir
   fi
}
trap cleanup EXIT
git clone --bare $PARENT_REPO_URL $tmp_repo_dir
cd $tmp_repo_dir
git push --mirror $CHILD_REPO_URL
cd ..
rm -rf $tmp_repo_dir
echo "Success! The child repo is ready to be cloned and worked in; i.e.:"
echo "\t # cd .. && git clone $CHILD_REPO_URL"
echo "Hint: To get updates from the parent in your 'child', (from within the child repo copy), use the script 'bin/pull-parent-repo'."
echo "\tIt will pull merge updates from the parent $PARENT_REPO_URL."







